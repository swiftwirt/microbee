{"entries":[{"timestamp":1757655851927,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":185,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":578,"diffs":[[1,""]]},{"start1":1,"length1":128,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":92,"length1":52,"diffs":[[1,"        \"radio\": \"*\",\n        \"microphone\": \"*\"\n"]]},{"start1":204,"length1":63,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":231,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"ble.ts","value":"namespace Robot.Bluetooth {\n    // ─── BLUETOOTH UART SETUP ───────────────────────────────────────────────────\n    const TX_POWER_MAX = 7;\n    const NEWLINE = serial.delimiters(Delimiters.NewLine);\n\n    bluetooth.startUartService();\n    bluetooth.setTransmitPower(TX_POWER_MAX);\n\n    bluetooth.onBluetoothConnected(() => {\n        connected = true;\n        commander.clearSession()\n        isReturning = false;\n        display.showIconIfChanged(IconNames.Heart);\n    });\n\n    bluetooth.onBluetoothDisconnected(() => {\n        connected = false;\n        display.showIconIfChanged(IconNames.Skull);\n    });\n\n    bluetooth.onUartDataReceived(NEWLINE, () => {\n        let cmd = bluetooth.uartReadUntil(NEWLINE).trim();\n        commander.dispatch(cmd);\n    });\n}"},{"type":"added","filename":"dispatcher.ts","value":"namespace Robot.Dispatcher {\n    export function dispatch(cmd: string) {\n        if (!isReturning) {\n            // Try to parse as JSON settings message first\n            if (!tryParseSettingsMessage(cmd)) {\n                // Handle existing numeric commands\n                executeCmd(cmd)\n            }\n        }\n    }\n\n    // ─── SETTINGS MESSAGE HANDLING ──────────────────────────────────────────────\n    function tryParseSettingsMessage(cmd: string): boolean {\n        try {\n\n            // Try to parse as JSON\n            const parsed = JSON.parse(cmd);\n\n            // format: {\"l\":X,\"r\":Y}\n            if (parsed && typeof parsed === \"object\") {\n                let leftSpeed: number | undefined;\n                let rightSpeed: number | undefined;\n\n                // Check new format first: {\"l\":X,\"r\":Y}\n                if (typeof parsed.l === \"number\" && typeof parsed.r === \"number\") {\n                    leftSpeed = parsed.l;\n                    rightSpeed = parsed.r;\n                }\n\n                // If we have valid speeds, apply them\n                if (leftSpeed !== undefined && rightSpeed !== undefined) {\n                    // Validate speed ranges before applying\n                    if (leftSpeed < 0 || leftSpeed > 1023 ||\n                        rightSpeed < 0 || rightSpeed > 1023) {\n                    }\n\n                    // Apply motor speeds using motion control\n                    Robot.Motor.setMotorSpeeds(leftSpeed, rightSpeed);\n                    // basic.showIcon(IconNames.Yes);\n                    return true; // Successfully handled\n                }\n            }\n            return false;\n\n        } catch (error) {\n            return false;\n        }\n    }\n\n    function executeCmd(cmd: string) {\n        switch (cmd) {\n            case \"1\": motion.forward(); break;\n            case \"2\": motion.backward(); break;\n            case \"3\": motion.spinLeft(); break;\n            case \"4\": motion.spinRight(); break;\n            case \"5\": motion.turnLeft(); break;\n            case \"6\": motion.turnRight(); break;\n            case \"7\": motion.turnLeftBackward(); break;\n            case \"8\": motion.turnRightBackward(); break;\n            case \"9\": break; // reverseCommands();\n            default: motion.stop(); break;\n        }\n    }\n}"}]},{"timestamp":1757656449973,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":92,"length1":26,"diffs":[[1,""]]},{"start1":119,"length1":57,"diffs":[[1,"        \"bluetooth\": \"*\"\n"]]},{"start1":247,"length1":87,"diffs":[[1,"        \"dispatcher.ts\"\n"]]}]},{"type":"edited","filename":"ble.ts","patch":[{"start1":350,"length1":0,"diffs":[[1,"        commander.clearSession()\n"]]},{"start1":412,"length1":58,"diffs":[[1,"        display.showIconIfChanged(IconNames.Heart);\n"]]},{"start1":546,"length1":58,"diffs":[[1,"        display.showIconIfChanged(IconNames.Skull);\n"]]},{"start1":716,"length1":40,"diffs":[[1,"        commander.dispatch(cmd);\n"]]}]},{"type":"edited","filename":"dispatcher.ts","patch":[{"start1":1408,"length1":72,"diffs":[[1,"                    Robot.Motor.setMotorSpeeds(leftSpeed, rightSpeed);\n"]]},{"start1":1780,"length1":499,"diffs":[[1,"            case \"1\": motion.forward(); break;\n            case \"2\": motion.backward(); break;\n            case \"3\": motion.spinLeft(); break;\n            case \"4\": motion.spinRight(); break;\n            case \"5\": motion.turnLeft(); break;\n            case \"6\": motion.turnRight(); break;\n            case \"7\": motion.turnLeftBackward(); break;\n            case \"8\": motion.turnRightBackward(); break;\n            case \"9\": break; // reverseCommands();\n            default: motion.stop(); break;\n"]]}]},{"type":"added","filename":"display.ts","value":"namespace Robot.Display {\n    // ─── UTILITY DISPLAY ─────────────────────────────────────────────────────────\n    let lastDisplayType = \"\";\n    let lastDisplayValue = -1;\n\n    export function showArrowIfChanged(a: ArrowNames) {\n        if (lastDisplayType !== \"arrow\" || lastDisplayValue !== a) {\n            basic.showArrow(a);\n            lastDisplayType = \"arrow\";\n            lastDisplayValue = a;\n        }\n    }\n\n    export function showIconIfChanged(i: IconNames) {\n        if (lastDisplayType !== \"icon\" || lastDisplayValue !== i) {\n            basic.showIcon(i);\n            lastDisplayType = \"icon\";\n            lastDisplayValue = i;\n        }\n    }\n}\n"},{"type":"added","filename":"motion.ts","value":"namespace Robot.Motion {\n    const ARROW_FWD = ArrowNames.South;\n    const ARROW_REV = ArrowNames.North;\n    const ARROW_SPIN_L = ArrowNames.West;\n    const ARROW_SPIN_R = ArrowNames.East;\n    const ARROW_TURN_L = ArrowNames.SouthEast;\n    const ARROW_TURN_R = ArrowNames.SouthWest;\n    const ARROW_TURN_L_REV = ArrowNames.NorthEast;\n    const ARROW_TURN_R_REV = ArrowNames.NorthWest;\n\n    const MAX_SPEED = 1023;\n    const TURN_SCALE_NUM = 4;\n    const TURN_SCALE_DEN = 10;\n    export const SAFE_DISTANCE = 40;\n    export const ACTIVE_BRAKE_MS = 100;\n\n    export let motorsRunning = false;\n    export let currentDir = 0;        // +1 forward, -1 backward, 0 spin/stop\n\n    // ─── MOTOR SPEED STATE ─────────────────────────────────────────────────────\n    let currentLeftSpeed = 0;\n    let currentRightSpeed = 0;\n\n    // ─── INDIVIDUAL MOTOR CONTROL ─────────────────────────────────────────────\n    export function setMotorSpeeds(leftSpeed: number, rightSpeed: number) {\n\n        // Validate input parameters\n        if (typeof leftSpeed !== \"number\" || typeof rightSpeed !== \"number\") {\n            leftSpeed = 0;\n            rightSpeed = 0;\n        }\n\n        // Clamp speeds to valid range 0-1023\n        const clampedLeft = Math.max(0, Math.min(1023, leftSpeed));\n        const clampedRight = Math.max(0, Math.min(1023, rightSpeed));\n\n        // Store current speeds\n        currentLeftSpeed = clampedLeft;\n        currentRightSpeed = clampedRight;\n    }\n\n    // ─── GET CURRENT MOTOR SPEEDS ─────────────────────────────────────────────\n    export function getCurrentLeftSpeed(): number {\n        return currentLeftSpeed;\n    }\n\n    export function getCurrentRightSpeed(): number {\n        return currentRightSpeed;\n    }\n\n    // ─── RESET TO DEFAULT SPEEDS ─────────────────────────────────────────────\n    export function resetToDefaultSpeeds() {\n        currentLeftSpeed = 0;  // 0 means use MAX_SPEED\n        currentRightSpeed = 0; // 0 means use MAX_SPEED\n        console.log(\"Reset to default speeds\");\n    }\n\n    // ─── CLEAR CUSTOM SPEEDS ─────────────────────────────────────────────────\n    export function clearCustomSpeeds() {\n        currentLeftSpeed = 0;\n        currentRightSpeed = 0;\n        console.log(\"Custom speeds cleared\");\n    }\n\n    // ─── MOTION FUNCTIONS ───────────────────────────────────────────────────────\n    export function forward() {\n        if (Robot.Sonar.frontDistance < SAFE_DISTANCE) {\n            stop(); Robot.Display.showIconIfChanged(IconNames.No);\n            return;\n        }\n        // Use custom speeds if set, otherwise use MAX_SPEED\n        const leftSpeed = currentLeftSpeed > 0 ? currentLeftSpeed : MAX_SPEED;\n        const rightSpeed = currentRightSpeed > 0 ? currentRightSpeed : MAX_SPEED;\n\n        writeWheels(leftSpeed, 0, rightSpeed, 0);\n        Robot.Display.showArrowIfChanged(ARROW_FWD);\n        motorsRunning = true;\n        currentDir = 1;\n    }\n\n    export function backward() {\n        if (Robot.Sonar.backDistance < SAFE_DISTANCE) {\n            stop(); Robot.Display.showIconIfChanged(IconNames.No);\n            return;\n        }\n        // Use custom speeds if set, otherwise use MAX_SPEED\n        const leftSpeed = currentLeftSpeed > 0 ? currentLeftSpeed : MAX_SPEED;\n        const rightSpeed = currentRightSpeed > 0 ? currentRightSpeed : MAX_SPEED;\n\n        writeWheels(0, leftSpeed, 0, rightSpeed);\n        Robot.Display.showArrowIfChanged(ARROW_REV);\n        motorsRunning = true;\n        currentDir = -1;\n    }\n\n    export function spinLeft() {\n        writeWheels(MAX_SPEED, 0, 0, 0);\n        Robot.Display.showArrowIfChanged(ARROW_SPIN_L);\n        motorsRunning = true;\n        currentDir = 0;\n    }\n\n    export function spinRight() {\n        writeWheels(0, 0, MAX_SPEED, 0);\n        Robot.Display.showArrowIfChanged(ARROW_SPIN_R);\n        motorsRunning = true;\n        currentDir = 0;\n    }\n\n    export function turnLeft() {\n        if (Robot.Sonar.frontDistance < SAFE_DISTANCE) {\n            stop(); Robot.Display.showIconIfChanged(IconNames.No);\n            return;\n        }\n        // Use custom speeds if set, otherwise use MAX_SPEED\n        const leftSpeed = currentLeftSpeed > 0 ? currentLeftSpeed : MAX_SPEED;\n        const rightSpeed = currentRightSpeed > 0 ? currentRightSpeed : MAX_SPEED;\n        const slow = Math.idiv(rightSpeed * TURN_SCALE_NUM, TURN_SCALE_DEN);\n\n        writeWheels(leftSpeed, 0, slow, 0);\n        Robot.Display.showArrowIfChanged(ARROW_TURN_L);\n        motorsRunning = true;\n        currentDir = 1;\n    }\n\n    export function turnRight() {\n        if (Robot.Sonar.frontDistance < SAFE_DISTANCE) {\n            stop(); Robot.Display.showIconIfChanged(IconNames.No);\n            return;\n        }\n        // Use custom speeds if set, otherwise use MAX_SPEED\n        const leftSpeed = currentLeftSpeed > 0 ? currentLeftSpeed : MAX_SPEED;\n        const rightSpeed = currentRightSpeed > 0 ? currentRightSpeed : MAX_SPEED;\n        const slow = Math.idiv(leftSpeed * TURN_SCALE_NUM, TURN_SCALE_DEN);\n\n        writeWheels(slow, 0, rightSpeed, 0);\n        Robot.Display.showArrowIfChanged(ARROW_TURN_R);\n        motorsRunning = true;\n        currentDir = 1;\n    }\n\n    export function turnLeftBackward() {\n        if (Robot.Sonar.backDistance < SAFE_DISTANCE) {\n            stop(); Robot.Display.showIconIfChanged(IconNames.No);\n            return;\n        }\n        // Use custom speeds if set, otherwise use MAX_SPEED\n        const leftSpeed = currentLeftSpeed > 0 ? currentLeftSpeed : MAX_SPEED;\n        const rightSpeed = currentRightSpeed > 0 ? currentRightSpeed : MAX_SPEED;\n        const slow = Math.idiv(rightSpeed * TURN_SCALE_NUM, TURN_SCALE_DEN);\n\n        writeWheels(0, leftSpeed, 0, slow);\n        Robot.Display.showArrowIfChanged(ARROW_TURN_L_REV);\n        motorsRunning = true;\n        currentDir = -1;\n    }\n\n    export function turnRightBackward() {\n        if (Robot.Sonar.backDistance < SAFE_DISTANCE) {\n            stop(); Robot.Display.showIconIfChanged(IconNames.No);\n            return;\n        }\n        // Use custom speeds if set, otherwise use MAX_SPEED\n        const leftSpeed = currentLeftSpeed > 0 ? currentLeftSpeed : MAX_SPEED;\n        const rightSpeed = currentRightSpeed > 0 ? currentRightSpeed : MAX_SPEED;\n        const slow = Math.idiv(leftSpeed * TURN_SCALE_NUM, TURN_SCALE_DEN);\n\n        writeWheels(0, slow, 0, rightSpeed);\n        Robot.Display.showArrowIfChanged(ARROW_TURN_R_REV);\n        motorsRunning = true;\n        currentDir = -1;\n    }\n\n    // ─── LOW-LEVEL MOTOR CONTROL ────────────────────────────────────────────────\n    export function writeWheels(Lf: number, Lb: number, Rf: number, Rb: number) {\n        pins.analogWritePin(AnalogPin.P12, Lf);\n        pins.analogWritePin(AnalogPin.P13, Lb);\n        pins.analogWritePin(AnalogPin.P14, Rf);\n        pins.analogWritePin(AnalogPin.P15, Rb);\n    }\n\n    export function brakePulse() {\n        if (!ACTIVE_BRAKE_MS) return;\n        const pulse = Math.idiv(MAX_SPEED, 2);\n        writeWheels(\n            currentDir > 0 ? 0 : pulse,\n            currentDir > 0 ? pulse : 0,\n            currentDir > 0 ? 0 : pulse,\n            currentDir > 0 ? pulse : 0\n        );\n        basic.pause(ACTIVE_BRAKE_MS);\n    }\n\n    export function stop() {\n        if (motorsRunning) brakePulse();\n        writeWheels(0, 0, 0, 0);\n        motorsRunning = false;\n        // DON'T reset custom speeds - keep them for next motion command\n        // currentLeftSpeed and currentRightSpeed remain unchanged\n        Robot.Display.showIconIfChanged(connected ? IconNames.Happy : IconNames.Skull);\n    }\n}"},{"type":"added","filename":"sonar.ts","value":"namespace Robot.Sonar {\n    // ─── SONAR PING WITH RETRY ───────────────────────────────────────────────────\n    const SONAR_RETRY = 2;\n    const SENSOR_INTERVAL_MS = 80;\n\n    export let frontDistance = 0;\n    export let backDistance = 0;\n\n    function retryPing(trigger: DigitalPin, echo: DigitalPin): number {\n        let d = sonar.ping(trigger, echo, PingUnit.Centimeters);\n        for (let i = 0; d === 0 && i < SONAR_RETRY; i++) {\n            basic.pause(5);\n            basic.pause(0);  // yield to scheduler\n            d = sonar.ping(trigger, echo, PingUnit.Centimeters);\n        }\n        return d || 999;\n    }\n\n    basic.forever(function () {\n        frontDistance = retryPing(DigitalPin.P1, DigitalPin.P2);\n        backDistance = retryPing(DigitalPin.P1, DigitalPin.P3);\n        if (!connected && !isReturning) {\n            // reverseCommands();\n        } else if (\n            (Robot.Motion.currentDir > 0 && frontDistance < Robot.Motion.SAFE_DISTANCE) ||\n            (Robot.Motion.currentDir < 0 && backDistance < Robot.Motion.SAFE_DISTANCE)\n        ) {\n            Robot.Motion.stop();\n        }\n        basic.pause(SENSOR_INTERVAL_MS);\n    });\n}"}]},{"timestamp":1757657046345,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":237,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":399,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1757655851926,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"microbee\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1757657079334}